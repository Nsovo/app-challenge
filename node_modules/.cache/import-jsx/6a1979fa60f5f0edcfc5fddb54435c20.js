'use strict';

const React = require('react');

const {
  Box
} = require('ink');

const {
  Text
} = require('ink');

const TextInput = require("ink-text-input").default;

const App = () => {
  const [address, search] = React.useState("");
  React.useEffect(() => {
    console.log("address ##", address);
    const data = {
      addresses: {
        "0x1001": "Monero standard address",
        "0x1002": "Monero sub address",
        "0x1003": "Bitcoin address",
        "0x1004": "Ethereum address"
      }
    };
    const addressData = Object.values(data.addresses).join(',');
    const dataArray = addressData.split(",");
    console.log(dataArray);

    for (let i = 0; i < dataArray.length;) {
      console.log(dataArray[i]);
    } // console.log("addressData", addressData)

  });
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(TextInput, {
    placeholder: "Enter address to search...",
    value: address,
    onChange: search
  })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Text, null, "Addressed searched for :")));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIkFwcCIsImFkZHJlc3MiLCJzZWFyY2giLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImNvbnNvbGUiLCJsb2ciLCJkYXRhIiwiYWRkcmVzc2VzIiwiYWRkcmVzc0RhdGEiLCJPYmplY3QiLCJ2YWx1ZXMiLCJqb2luIiwiZGF0YUFycmF5Iiwic3BsaXQiLCJpIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHtCb3h9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcblxuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRjb25zdCBbYWRkcmVzcywgc2VhcmNoXSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coXCJhZGRyZXNzICMjXCIsIGFkZHJlc3MpXG5cdFx0Y29uc3QgZGF0YSA9IHtcblx0XHRcdGFkZHJlc3Nlczoge1xuXHRcdFx0XHRcIjB4MTAwMVwiOiBcIk1vbmVybyBzdGFuZGFyZCBhZGRyZXNzXCIsXG5cdFx0XHRcdFwiMHgxMDAyXCI6IFwiTW9uZXJvIHN1YiBhZGRyZXNzXCIsXG5cdFx0XHRcdFwiMHgxMDAzXCI6IFwiQml0Y29pbiBhZGRyZXNzXCIsXG5cdFx0XHRcdFwiMHgxMDA0XCI6IFwiRXRoZXJldW0gYWRkcmVzc1wiXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3QgYWRkcmVzc0RhdGEgPSAgT2JqZWN0LnZhbHVlcyhkYXRhLmFkZHJlc3Nlcykuam9pbignLCcpXG5cdFx0Y29uc3QgZGF0YUFycmF5ID0gYWRkcmVzc0RhdGEuc3BsaXQoXCIsXCIpXG5cdFx0Y29uc29sZS5sb2coZGF0YUFycmF5KVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YUFycmF5Lmxlbmd0aDspe1xuXHRcdFx0Y29uc29sZS5sb2coZGF0YUFycmF5W2ldKVxuXHRcdH1cblxuXHRcdC8vIGNvbnNvbGUubG9nKFwiYWRkcmVzc0RhdGFcIiwgYWRkcmVzc0RhdGEpXG5cblx0fSk7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94PlxuXHRcdFx0PGRpdj5cblx0XHRcdFx0PFRleHRJbnB1dFxuXHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiRW50ZXIgYWRkcmVzcyB0byBzZWFyY2guLi5cIlxuXHRcdFx0XHRcdHZhbHVlPXthZGRyZXNzfVxuXHRcdFx0XHRcdG9uQ2hhbmdlPXtzZWFyY2h9XG5cdFx0XHRcdC8+XG5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdj5cblx0XHRcdFx0PFRleHQ+XG5cdFx0XHRcdFx0QWRkcmVzc2VkIHNlYXJjaGVkIGZvciA6XG5cdFx0XHRcdDwvVGV4dD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0VBQUNDO0FBQUQsSUFBUUQsT0FBTyxDQUFDLEtBQUQsQ0FBckI7O0FBQ0EsTUFBTTtFQUFDRTtBQUFELElBQVNGLE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUVBLE1BQU1HLFNBQVMsR0FBR0gsT0FBTyxDQUFDLGdCQUFELENBQVAsQ0FBMEJJLE9BQTVDOztBQUdBLE1BQU1DLEdBQUcsR0FBRyxNQUFNO0VBQ2pCLE1BQU0sQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLElBQW9CUixLQUFLLENBQUNTLFFBQU4sQ0FBZSxFQUFmLENBQTFCO0VBRUFULEtBQUssQ0FBQ1UsU0FBTixDQUFnQixNQUFNO0lBQ3JCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxZQUFaLEVBQTBCTCxPQUExQjtJQUNBLE1BQU1NLElBQUksR0FBRztNQUNaQyxTQUFTLEVBQUU7UUFDVixVQUFVLHlCQURBO1FBRVYsVUFBVSxvQkFGQTtRQUdWLFVBQVUsaUJBSEE7UUFJVixVQUFVO01BSkE7SUFEQyxDQUFiO0lBU0EsTUFBTUMsV0FBVyxHQUFJQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0osSUFBSSxDQUFDQyxTQUFuQixFQUE4QkksSUFBOUIsQ0FBbUMsR0FBbkMsQ0FBckI7SUFDQSxNQUFNQyxTQUFTLEdBQUdKLFdBQVcsQ0FBQ0ssS0FBWixDQUFrQixHQUFsQixDQUFsQjtJQUNBVCxPQUFPLENBQUNDLEdBQVIsQ0FBWU8sU0FBWjs7SUFDQSxLQUFLLElBQUlFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLFNBQVMsQ0FBQ0csTUFBOUIsR0FBc0M7TUFDckNYLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTyxTQUFTLENBQUNFLENBQUQsQ0FBckI7SUFDQSxDQWhCb0IsQ0FrQnJCOztFQUVBLENBcEJEO0VBc0JBLG9CQUNDLG9CQUFDLEdBQUQscUJBQ0MsOENBQ0Msb0JBQUMsU0FBRDtJQUNDLFdBQVcsRUFBQyw0QkFEYjtJQUVDLEtBQUssRUFBRWQsT0FGUjtJQUdDLFFBQVEsRUFBRUM7RUFIWCxFQURELENBREQsZUFTQyw4Q0FDQyxvQkFBQyxJQUFELG1DQURELENBVEQsQ0FERDtBQWlCQSxDQTFDRDs7QUE0Q0FlLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmxCLEdBQWpCIn0=