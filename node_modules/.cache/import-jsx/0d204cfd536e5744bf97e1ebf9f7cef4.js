'use strict';

const React = require('react');

const {
  Box
} = require('ink');

const {
  Text
} = require('ink');

const TextInput = require("ink-text-input").default;

const App = () => {
  const [address, search] = React.useState("");
  const [results, SetResult] = React.useState("results");
  React.useEffect(() => {
    const data = {
      addresses: {
        "0x1001": "Monero standard address",
        "0x1002": "Monero sub address",
        "0x1003": "Bitcoin address",
        "0x1004": "Ethereum address"
      }
    };
    const addressData = Object.values(data.addresses).join(',');
    const dataArray = addressData.split(",");

    if (address && addressData.length > 3) {
      console.log("did it check length");

      for (let value of dataArray) {
        // console.log(value)
        if (value.includes(address)) console.log("true");
      }
    }
  });
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(TextInput, {
    placeholder: "Enter address to search...",
    value: address,
    onChange: search
  }), /*#__PURE__*/React.createElement(Text, null, "Addressed searched for : ", results));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIkFwcCIsImFkZHJlc3MiLCJzZWFyY2giLCJ1c2VTdGF0ZSIsInJlc3VsdHMiLCJTZXRSZXN1bHQiLCJ1c2VFZmZlY3QiLCJkYXRhIiwiYWRkcmVzc2VzIiwiYWRkcmVzc0RhdGEiLCJPYmplY3QiLCJ2YWx1ZXMiLCJqb2luIiwiZGF0YUFycmF5Iiwic3BsaXQiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwidmFsdWUiLCJpbmNsdWRlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1aS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7Qm94fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3Qge1RleHR9ID0gcmVxdWlyZSgnaW5rJyk7XG5cbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoXCJpbmstdGV4dC1pbnB1dFwiKS5kZWZhdWx0O1xuXG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblx0Y29uc3QgW2FkZHJlc3MsIHNlYXJjaF0gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgW3Jlc3VsdHMgLCBTZXRSZXN1bHRdID0gUmVhY3QudXNlU3RhdGUoXCJyZXN1bHRzXCIpXG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0YWRkcmVzc2VzOiB7XG5cdFx0XHRcdFwiMHgxMDAxXCI6IFwiTW9uZXJvIHN0YW5kYXJkIGFkZHJlc3NcIixcblx0XHRcdFx0XCIweDEwMDJcIjogXCJNb25lcm8gc3ViIGFkZHJlc3NcIixcblx0XHRcdFx0XCIweDEwMDNcIjogXCJCaXRjb2luIGFkZHJlc3NcIixcblx0XHRcdFx0XCIweDEwMDRcIjogXCJFdGhlcmV1bSBhZGRyZXNzXCJcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBhZGRyZXNzRGF0YSA9ICBPYmplY3QudmFsdWVzKGRhdGEuYWRkcmVzc2VzKS5qb2luKCcsJylcblx0XHRjb25zdCBkYXRhQXJyYXkgPSBhZGRyZXNzRGF0YS5zcGxpdChcIixcIilcblx0XHRpZihhZGRyZXNzICYmIGFkZHJlc3NEYXRhLmxlbmd0aCA+IDMpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwiZGlkIGl0IGNoZWNrIGxlbmd0aFwiKVxuXHRcdFx0Zm9yIChsZXQgdmFsdWUgb2YgZGF0YUFycmF5KSB7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKHZhbHVlKVxuXHRcdFx0XHRpZiAodmFsdWUuaW5jbHVkZXMoYWRkcmVzcykpXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJ0cnVlXCIpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdH0pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveD5cblx0XHRcdDxUZXh0SW5wdXRcblx0XHRcdFx0cGxhY2Vob2xkZXI9XCJFbnRlciBhZGRyZXNzIHRvIHNlYXJjaC4uLlwiXG5cdFx0XHRcdHZhbHVlPXthZGRyZXNzfVxuXHRcdFx0XHRvbkNoYW5nZT17c2VhcmNofVxuXHRcdFx0Lz5cblx0XHRcdDxUZXh0PlxuXHRcdFx0XHRBZGRyZXNzZWQgc2VhcmNoZWQgZm9yIDoge3Jlc3VsdHN9XG5cdFx0XHQ8L1RleHQ+XG5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtFQUFDQztBQUFELElBQVFELE9BQU8sQ0FBQyxLQUFELENBQXJCOztBQUNBLE1BQU07RUFBQ0U7QUFBRCxJQUFTRixPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFFQSxNQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxnQkFBRCxDQUFQLENBQTBCSSxPQUE1Qzs7QUFHQSxNQUFNQyxHQUFHLEdBQUcsTUFBTTtFQUNqQixNQUFNLENBQUNDLE9BQUQsRUFBVUMsTUFBVixJQUFvQlIsS0FBSyxDQUFDUyxRQUFOLENBQWUsRUFBZixDQUExQjtFQUNBLE1BQU0sQ0FBQ0MsT0FBRCxFQUFXQyxTQUFYLElBQXdCWCxLQUFLLENBQUNTLFFBQU4sQ0FBZSxTQUFmLENBQTlCO0VBRUFULEtBQUssQ0FBQ1ksU0FBTixDQUFnQixNQUFNO0lBQ3JCLE1BQU1DLElBQUksR0FBRztNQUNaQyxTQUFTLEVBQUU7UUFDVixVQUFVLHlCQURBO1FBRVYsVUFBVSxvQkFGQTtRQUdWLFVBQVUsaUJBSEE7UUFJVixVQUFVO01BSkE7SUFEQyxDQUFiO0lBU0EsTUFBTUMsV0FBVyxHQUFJQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0osSUFBSSxDQUFDQyxTQUFuQixFQUE4QkksSUFBOUIsQ0FBbUMsR0FBbkMsQ0FBckI7SUFDQSxNQUFNQyxTQUFTLEdBQUdKLFdBQVcsQ0FBQ0ssS0FBWixDQUFrQixHQUFsQixDQUFsQjs7SUFDQSxJQUFHYixPQUFPLElBQUlRLFdBQVcsQ0FBQ00sTUFBWixHQUFxQixDQUFuQyxFQUFzQztNQUNyQ0MsT0FBTyxDQUFDQyxHQUFSLENBQVkscUJBQVo7O01BQ0EsS0FBSyxJQUFJQyxLQUFULElBQWtCTCxTQUFsQixFQUE2QjtRQUM1QjtRQUNBLElBQUlLLEtBQUssQ0FBQ0MsUUFBTixDQUFlbEIsT0FBZixDQUFKLEVBQ0NlLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE1BQVo7TUFDRDtJQUNEO0VBRUQsQ0FyQkQ7RUF1QkEsb0JBQ0Msb0JBQUMsR0FBRCxxQkFDQyxvQkFBQyxTQUFEO0lBQ0MsV0FBVyxFQUFDLDRCQURiO0lBRUMsS0FBSyxFQUFFaEIsT0FGUjtJQUdDLFFBQVEsRUFBRUM7RUFIWCxFQURELGVBTUMsb0JBQUMsSUFBRCxxQ0FDMkJFLE9BRDNCLENBTkQsQ0FERDtBQWFBLENBeENEOztBQTBDQWdCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnJCLEdBQWpCIn0=